AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack defines the service resources

Parameters:
  ArtifactsBucketParameter:
    Description: "Bucket where artifacts are stored"
    Type: String

  EnvironmentParameter:   
    Type: String
    Description: The stage name for the API Gateway and controls some policies
  
  SystemGuidParameter:
    Description: "System Guid. No spaces. Lower case."
    Type: String

  SystemNameParameter:
    Description: "System Name. No spaces. Lower case."
    Type: String    


# LazyMagic inserted ServiceParameters
#LzParameters#

Resources:
  # RequestTemplateString:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Value: |
  #       #set($path = $input.path)
  #       #set($prefixLength = $input.params('apiPrefix').length())
  #       {
  #         "path": "$path.substring($prefixLength)"
  #       }

#LzLambdas#

#LzApis#

#LzAuthenticators#

  # WebSocket Support
#LzWebsockets#


 # The Tenancy DynamoDb table is used like a separate database in DynamoDB
  # See the LazyMagic documentation for more information on how to use this table
  # with the LazyMagic.DynamoDBRepo library/package.
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: notifications
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: SK1
        AttributeType: S
      - AttributeName: SK2
        AttributeType: S
      - AttributeName: SK3
        AttributeType: S
      - AttributeName: SK4
        AttributeType: S
      - AttributeName: SK5
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: PK-SK1-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK1
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK2-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK2
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK3-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK3
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK4-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK4
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK5-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK5
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      GlobalSecondaryIndexes:
      - IndexName: GSI1
        KeySchema:
        - AttributeName: GSI1PK
          KeyType: HASH
        - AttributeName: GSI1SK
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE


  NotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Here's the C# specific handler format
      PackageType: Zip
      CodeUri: ../../Containers/NotificationsLambda/bin/Release/net8.0
             # container::namespace.class::method
      Handler: NotificationsLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: Processes DynamoDB stream events
      MemorySize: 256
      Timeout: 20
      Tracing: Active   
      Policies:
      # You can add additional permissions here if needed
      - DynamoDBStreamReadPolicy:
          StreamName: !GetAtt NotificationsTable.StreamArn
          TableName: !Ref NotificationsTable
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          # Allow the function to manage WebSocket connections. Primary use is to broadcast messages to subscribers.
          - Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/* 
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt NotificationsTable.StreamArn
            BatchSize: 100
            StartingPosition: LATEST
      Environment:
        Variables:
          WEBSOCKET-MGMT-URL:
            Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}/@connections 

#LzConfigFunction#

Outputs:
  ConfigFunctionArn:
    Value: !GetAtt ConfigFunction.FunctionARN
  # LazyMagic inserted Outputs
#LzOutputs#

    
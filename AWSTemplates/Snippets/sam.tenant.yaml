AWSTemplateFormatVersion: '2010-09-09'
# Generated by __ResourceGenerator__ from __TemplateSource__
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack is used to create a tenancy distribution
  Note: A sam.teant.assets.yaml stack, for this tenant, must be deployed before this stack

Parameters:
  SystemNameParameter:
    Description: "System Name"
    Type: String

  TenantKeyParameter:
    Description: "Tenant Key. No spaces. Lower case."
    Type: String
    MinLength: '3'
    MaxLength: '19'

  SubDomainParameter:
    Description: "SubDomain"
    Type: String

  # GuidParameter is usually the SystemGuid in the serviceconfig.yaml file
  GuidParameter:
    Description: "GuidParameter"
    Type: String

  # RootDomainParameter is usuall the value in serviceconfig.yaml file
  RootDomainParameter:
    Description: "RootDomain"
    Type: String

  # Parameters from the serviceconfig.yaml file
  EnvironmentParameter:
    Description: "Environment"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod

  HostedZoneIdParameter:
    Type: String    

  AcmCertificateArnParameter:
    Type: String

  # Parameters from Policy stack outputs
  OriginRequestPolicyIdParameter:
    Type: String

  CachePolicyIdParameter:
    Type: String

  CacheByHeaderPolicyIdParameter:
    Type: String

  ApiCachePolicyIdParameter:
    Type: String

  ConfigFunctionArnParameter:
    Type: String

  # ResponseHeadersPolicyIdParameter:
  #   Type: String

  RequestFunctionArnParameter:
    Type: String

  RequestPrefixFunctionArnParameter:
    Type: String

  ResponseFunctionArnParameter: 
    Type: String

  SystemAssetsBucketNameParameter:
    Type: String    

  AssetsBucketNameParameter:
    Type: String    

  CDNLogBucketNameParameter:
    Type: String

#LzWebAppParameters#

  # Parameters from Service stack outputs
#LzServiceParameters#

Conditions: 
  SubDomainEmpty: !Equals [!Ref SubDomainParameter, ""]
  HasSubDomain: !Not [!Condition SubDomainEmpty]
  IsDev : !Equals [!Ref EnvironmentParameter, "dev"]   
  IsProd: !Not [!Condition IsDev]

Resources:
  ResponseHeadersPolicy: 
    # Generated by __ResourceGenerator__
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ResponseHeadersPolicy-${TenantKeyParameter}-${GuidParameter}
        CorsConfig:
          AccessControlAllowCredentials: false # must be false when AccessControlAllowOrigins, AccessControlAllowHeaders, or AccessControlAllowMethods is '*'
          AccessControlAllowHeaders:
            Items: 
              - Authorization
              - "*"
          AccessControlAllowMethods:
            Items:
              - GET 
              - POST
              - OPTIONS 
          AccessControlAllowOrigins:
            Items:
              - !Sub "https://${SubDomainParameter}.${RootDomainParameter}" 
              - "https://0.0.0.0"
              - !If
                - IsDev  
                - !Sub "https://localhost:*"
                - !Ref AWS::NoValue
                
              
          AccessControlExposeHeaders:
            Items:
              - Date
              - x-api-id
          AccessControlMaxAgeSec: 3000
          OriginOverride: true
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 3000 # time, in seconds, browser may cache preflight requests
            IncludeSubdomains: true # subdomains must also use HTTPS
            Preload: true # add site to HSTS preload list
            Override: true # override any origin settings 
            # default-src 'self'; // This directive serves as a fallback for other CSP directives. It specifies the default policy for fetching resources such as JavaScript, images, CSS, fonts, AJAX requests, frames, HTML5 media, and more.
            # img-src data: ; // This directive specifies valid sources of images. The 'data:' scheme allows data: URIs to be used as a content source. This is useful, for example, for embedding small images directly into CSS or HTML files.
            # script-src 'self'; // This directive specifies valid sources for JavaScript. This includes not only URLs loaded directly into <script> elements, but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution.
            # style-src self; // This directive specifies valid sources for stylesheets. This includes not only external stylesheets, but also inline <style> elements or the style attribute on any element.
            # style-src-elem self; // This directive specifies valid sources for stylesheets that are applied to elements. This includes not only external stylesheets, but also inline <style> elements or the style attribute on any element.
            # object-src self; // This directive specifies valid sources for the <object>, <embed>, and <applet> elements. It does not apply to <iframe> or <object> elements with a data attribute.
            # font-src *; // This directive specifies valid sources for fonts loaded using @font-face.
            # NOTE: 'self' refers to the exact domain from which the content is served. For our CloudFront distribution, this includes the subdomain.
          ContentSecurityPolicy:
            ContentSecurityPolicy:
              !If
                - IsDev
                - !Sub "default-src 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter}; img-src data: 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter}; script-src 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter} 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter} 'unsafe-inline'; style-src-elem 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter} 'unsafe-inline'; object-src 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter}; worker-src 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter}; font-src *; connect-src 'self' https://0.0.0.0 https://${SubDomainParameter}.${RootDomainParameter} wss://*.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter} https://cognito-idp.${AWS::Region}.amazonaws.com;"
                - !Sub "default-src 'self' https://0.0.0.0; img-src data: 'self' https://0.0.0.0; script-src 'self' https://0.0.0.0 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://0.0.0.0 'unsafe-inline'; style-src-elem 'self' https://0.0.0.0 'unsafe-inline'; object-src 'self' https://0.0.0.0; worker-src 'self' https://0.0.0.0; font-src *; connect-src 'self' https://0.0.0.0 wss://*.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter} https://cognito-idp.${AWS::Region}.amazonaws.com;"
            Override: true
          FrameOptions: # control whether a browser should be allowed to render a page in a <frame>, <iframe>, <embed>, or <object> tag
            FrameOption: DENY
            Override: true
          ReferrerPolicy: # The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests.
            ReferrerPolicy: same-origin # Sends the full referrer to same-origin destinations but no referrer to cross-origin destinations.
            Override: true

#LzCloudFront#



AWSTemplateFormatVersion: '2010-09-09'

Description: | 
  This stack creates ubiqutious cloudfront policies, functions etc. for tenancies
Parameters:
  SystemName:
    Description: "System Name"
    Type: String
  GuidParameter:
    Description: "System Guid"
    Type: String
  EnvironmentParameter:
    Description: "Environment"
    Type: String
    Default: "dev"
    AllowedValues:
      - dev
      - test
      - prod

Conditions:
  IsDev: !Equals [!Ref EnvironmentParameter, "dev"]

Resources:

  Request:  
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${SystemName}-req-${GuidParameter}
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            return request;
        }
      AutoPublish: true
      FunctionConfig:
        Comment: 'Default handler. Use the CachePolicy with this function.'
        Runtime: cloudfront-js-2.0


  RequestDev:  
    Type: AWS::CloudFront::Function
    DependsOn: Request 
    Properties:
      Name: !Sub ${SystemName}-req-dev-${GuidParameter}
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;
          var origin = headers.origin && headers.origin.value;
          function isLocalhost(origin) {
              return  origin.startsWith('https://localhost:') || origin.startsWith('http://localhost:');
          }
          // Check if it's a preflight request from localhost
          if (
              request.method === 'OPTIONS' 
              && origin 
              && isLocalhost(origin) 
              && headers['access-control-request-method']
          ) {
              // Return a 204 No Content for preflight
              return {
                  statusCode: 204,
                  statusDescription: 'No Content',
                  headers: {
                      'access-control-allow-origin': { value: origin },
                      'access-control-allow-methods': { value: 'GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH' },
                      'access-control-allow-headers': { value: 'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token' },
                      'access-control-max-age': { value: '86400' },
                      'cache-control': { value: 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0' }
                  }
              };
          }
          return request;
        }
      AutoPublish: true
      FunctionConfig:
        Comment: 'Return a 204 for preflight requests when origin is localhost. Use CachePolicy.'
        Runtime: cloudfront-js-2.0

  # Return a 204 for preflight requests when in development mode and remove the prefix from the URI
  RequestPrefixDev:  
    Type: AWS::CloudFront::Function
    DependsOn: RequestDev # avoides rate limit on function creation
    Properties:
      Name: !Sub ${SystemName}-req-prefix-dev-${GuidParameter}
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            var headers = request.headers;
            var origin = headers.origin && headers.origin.value;
         
            function isLocalhost(origin) {
                return  origin.startsWith('https://localhost:') || origin.startsWith('http://localhost:');
            }
        
            function removeLastPathSegment(uri) {
                try {
                    const url = new URL(uri);
                    const pathSegments = url.pathname.split('/');
                    pathSegments.pop(); // Remove last segment
                    url.pathname = pathSegments.join('/');
                    return url.toString();
                } catch (e) {
                    return uri.substring(0, uri.lastIndexOf('/'));
                }
            }

            // Check if it's a preflight request from localhost
            if (
                request.method === 'OPTIONS' 
                && origin 
                && isLocalhost(origin) 
                && headers['access-control-request-method']
            ) {
                // Return a 204 No Content for preflight
                return {
                    statusCode: 204,
                    statusDescription: 'No Content',
                    headers: {
                        'access-control-allow-origin': { value: origin },
                        'access-control-allow-methods': { value: 'GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH' },
                        'access-control-allow-headers': { value: 'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token' },
                        'access-control-max-age': { value: '86400' },
                        'cache-control': { value: 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0' }
                    }
                };
            }
            // URI modification
            var uri = request.uri;
            if(uri.endsWith("Page")) uri = removeLastPathSegment(uri);
            headers['x-custom-cache-key'] = { value: uri }; // CF uses the modified URI as the cache key so we use a header instead
            var secondSlash = uri.indexOf('/', 1);
            request.uri = secondSlash > 0 ? uri.slice(secondSlash) : '/';
            return request;
        }

      AutoPublish: true
      FunctionConfig:
        Comment: 'Return a 204 for preflight requests when origin is localhost and remove the prefix from the URI. Used in development deployments only.  Use the CacheByHeaderPolicy'
        Runtime: cloudfront-js-2.0

  RequestPrefix:  
    Type: AWS::CloudFront::Function
    DependsOn: RequestPrefixDev # avoides rate limit on function creation
    Properties:
      Name: !Sub ${SystemName}-req-prefix-${GuidParameter}
      FunctionCode: |
        function handler(event) {
            var request = event.request;

            function removeLastPathSegment(uri) {
                try {
                    const url = new URL(uri);
                    const pathSegments = url.pathname.split('/');
                    pathSegments.pop(); // Remove last segment
                    url.pathname = pathSegments.join('/');
                    return url.toString();
                } catch (e) {
                    return uri.substring(0, uri.lastIndexOf('/'));
                }
            }

            // URI modification
            var uri = request.uri;
            if(uri.endsWith("Page")) uri = removeLastPathSegment(uri);
            var headers = request.headers;
            headers['x-custom-cache-key'] = { value: uri}; // CF uses the modified URI as the cache key so we use a header instead
            var secondSlash = uri.indexOf('/', 1);
            request.uri = secondSlash > 0 ? uri.slice(secondSlash) : "/";
            return request;
        }
      AutoPublish: true
      FunctionConfig:
        Comment: 'Remove the prefix from the URI. Use the CacheByHeaderPolicy'
        Runtime: cloudfront-js-2.0
  
  ResponseDev:  
    Type: AWS::CloudFront::Function
    DependsOn: RequestPrefix # avoides rate limit on function creation
    Properties:
      Name: !Sub ${SystemName}-rsp-dev-${GuidParameter}
      FunctionCode: 
        Fn::Sub: |
            function handler(event) {
                var response = event.response;
                // Add your speical response handling here
                return response;
            }
      AutoPublish: true
      FunctionConfig:
        Comment: 'Modify response headers in development mode.'
        Runtime: cloudfront-js-2.0

  Response:  
    Type: AWS::CloudFront::Function
    DependsOn: ResponseDev # avoides rate limit on function creation
    Properties:
      Name: !Sub ${SystemName}-rsp-${GuidParameter}
      FunctionCode: 
        Fn::Sub: |
            function handler(event) {
                var response = event.response;
                // Add your special response handling here
                return response;
            }
      AutoPublish: true
      FunctionConfig:
        Comment: 'Modify response headers.'
        Runtime: cloudfront-js-2.0

  CacheByHeaderDevPolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Properties:
      CachePolicyConfig:
        Name: CacheByHeaderDevPolicy
        Comment: 'Cache policy using custom x-custom-cache-key header'
        DefaultTTL: 1  # use minimum TTL in development
        MaxTTL: 31536000   # 1 year in seconds
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers: 
              - 'x-custom-cache-key'
          QueryStringsConfig:
            QueryStringBehavior: none

  CacheByHeaderProdPolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Properties:
      CachePolicyConfig:
        Name: CacheByHeaderProdPolicy
        Comment: 'Cache policy using custom x-custom-cache-key header'
        DefaultTTL: 86400  # 1 day in seconds
        MaxTTL: 31536000   # 1 year in seconds
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers: 
              - 'x-custom-cache-key'
          QueryStringsConfig:
            QueryStringBehavior: none

  CachingOptimizedDevPolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Properties:
      CachePolicyConfig:
        Name: CachingOptimizedDev
        Comment: 'Managed policy for optimized caching for dev environment'
        DefaultTTL: 1  # allows rapid update for development testing
        MaxTTL: 31536000   # 1 year in seconds
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none


# CloudFront Policies 
# There are three types of CloudFront policies:
# - CachePolicy: Determines the cache key and the TTLs for the cacheable content.
# - OriginRequestPolicy: Determines the headers, query strings, and cookies that are included in requests that CloudFront sends to the origin.
#       Note that any headers included in the CachePolicy are also passed through to the origin.  
# - ResponseHeadersPolicy: Determines the headers that CloudFront includes in the response that it returns to the viewer.
#       Note: The ResponseHeadersPolicy may contain distribution specific content in the CSP, so it is defined in the sam.cloudfront.yaml template.
# AWS Provides some managed policies that can be used in lieu of creating custom policies. The IDS for these policies don't change and 
# are provided below.
#
# Type: AWS::CloudFront::CachePolicy
# - 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled, recommended for API Gateway
# - 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
# - b2884449-e4de-46a7-ac36-70bc7f1ddd6d # Managed-CachingOptimizedForUncompressedObjects
# - 08627262-05a9-4f76-9ded-b50ca2e3a84f # Managed-Elemental-MediaPackage

# Type: AWS::CloudFront::OriginRequestPolicy
# - 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
# - 33f36d7e-f396-46d9-90e0-52428a34d9dc # Managed-AllViewerAndCloudFrontHeaders-2022-06
# - b689b0a8-53d0-40ab-baf2-68738e2966ac # Managed-AllViewerExceptHostHeader, recommended for API Gateway
# - 59781a5b-3903-41f3-afcb-af62929ccde1 # Managed-CORS-CustomOrigin
# - 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
# - 775133bc-15f2-49f9-abea-afb2e0bf67d2 # Managed-Elemental-MediaTailor-PersonalizedManifests
# - acba4595-bd28-49b8-b9fe-13317c0390fa # Managed-UserAgentRefererHeaders

  # DevCachePolicy:
  #   Type: AWS::CloudFront::CachePolicy
  #   Properties:
  #     CachePolicyConfig:
  #       Name: !Sub ${AWS::StackName}-DevCachePlcy-${GuidParameter}
  #       DefaultTTL: 1
  #       MaxTTL: 1
  #       MinTTL: 1
  #       ParametersInCacheKeyAndForwardedToOrigin: 
  #         CookiesConfig:
  #           CookieBehavior:  all
  #         QueryStringsConfig:
  #           QueryStringBehavior: all
  #         EnableAcceptEncodingBrotli: true
  #         EnableAcceptEncodingGzip: true
  #         HeadersConfig: 
  #           HeaderBehavior: whitelist 
  #           Headers:
  #           - Authorization 
  #           - Accept-Charset 
  #           - Origin
  #           - Access-Control-Request-Method 
  #           - Access-Control-Request-Headers 
  #           - Accept 
  #           - Referer 
  #           - Accept-Language 
  #           - Accept-Datetime

  WebSocketOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub ${SystemName}-WSOrignReqPlcy-${GuidParameter}
        Comment: "OriginRequestPolciy - Forward necessary headers for WebSocket connections"
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            - Sec-WebSocket-Key
            - Sec-WebSocket-Version
            - Sec-WebSocket-Protocol
            - Sec-WebSocket-Extensions
            - Sec-WebSocket-Accept
            - Host
            - Origin
        CookiesConfig:
          CookieBehavior: none
        QueryStringsConfig:
          QueryStringBehavior: all


Outputs:
  CachePolicyId:
    # Managed-CachingOptimized
    Value: !If [IsDev, !Ref CachingOptimizedDevPolicy, 658327ea-f89d-4fab-a63d-7e88639e58f6]

  CacheByHeaderPolicyId:
    Value: !If [IsDev, !Ref CacheByHeaderDevPolicy, !Ref CacheByHeaderProdPolicy]

  OriginRequestPolicyId:
    # Managed-AllViewerExceptHostHeader
    Value: b689b0a8-53d0-40ab-baf2-68738e2966ac 
  ApiOriginRequestPolicyId:
    # Managed-AllViewerExceptHostHeader
    Value: b689b0a8-53d0-40ab-baf2-68738e2966ac 
  ApiCachePolicyId:
    # Managed-CachingDisabled
    Value: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad 
  WebsocketOriginRequestPolicyId:
    Value: !Ref WebSocketOriginRequestPolicy
  # ResponseHeadersPolicyId:
  #   Value: !GetAtt ResponseHeadersPolicy.Id
  RequestFunctionArn:
    Value: !If [ IsDev, !GetAtt RequestDev.FunctionARN, !GetAtt Request.FunctionARN]
  RequestPrefixFunctionArn:
    Value: !If [ IsDev, !GetAtt RequestPrefixDev.FunctionARN, !GetAtt RequestPrefix.FunctionARN]
  ResponseFunctionArn:
    Value: !If [IsDev, !GetAtt ResponseDev.FunctionARN, !GetAtt Response.FunctionARN]
  

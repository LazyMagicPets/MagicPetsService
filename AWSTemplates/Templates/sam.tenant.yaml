AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack is used to create a tenancy distribution. Each tenant must have its own 
  domain name and certificate.

#  We use CloudFront functions and CloudFront KeyValueStores to create origins on the fly based on
#  the subdomain and path of each request. This allows us to have a single CloudFront distribution
#  that can serve multiple subtenants for each tenant.


Parameters:
   # Parameters from the serviceconfig.yaml file
  SystemKeyParameter:
    Description: "System Name"
    Type: String
 
  EnvironmentParameter:
    Description: "Environment"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod

  CDNLogBucketNameParameter:
    Description: "CDN Log Bucket Name"
    Type: String

  # TenantKey is the Tenant defined in the serviceconfig.yaml file
  TenantKeyParameter:
    Description: "Tenant Key. No spaces. Lower case."
    Type: String  # we don't specify min/max length as these vary with the GUID(s) used for system and tenant resources

  # GuidParameter is the TenantSuffix from the serviceconfig.yaml tenant entry
  GuidParameter:
    Description: "GuidParameter"
    Type: String

  # RootDomainParameter is the RootDomain from the serviceconfig.yaml tenant entry
  RootDomainParameter:
    Description: "RootDomain"
    Type: String

  # HostedZoneIdParameter is the HostedZoneId from the serviceconfig.yaml tenant entry
  HostedZoneIdParameter:
    Type: String    

  # AcmCertificateArnParameter is the AcmCertificateArn from the serviceconfig.yaml tenant entry
  AcmCertificateArnParameter:
    Type: String


  # Parameters from CFPolicies stack outputs
  OriginRequestPolicyIdParameter:
    Type: String

  CachePolicyIdParameter:
    Type: String

  ApiCachePolicyIdParameter:
    Type: String

  AuthConfigFunctionArnParameter:
    Type: String

  DevConfigFunctionArnParameter:
    Type: String

  RequestFunctionArnParameter:
    Type: String

  ApiRequestFunctionArnParameter:
    Type: String


Conditions: 
  IsDev : !Equals [!Ref EnvironmentParameter, "dev"]

Resources:

  ResponseHeadersPolicy: 
    # Generated by __ResourceGenerator__
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ${SystemKeyParameter}-${TenantKeyParameter}--ResponseHeadersPolicy
        CorsConfig:
          AccessControlAllowCredentials: false # must be false when AccessControlAllowOrigins, AccessControlAllowHeaders, or AccessControlAllowMethods is '*'
          AccessControlAllowHeaders:
            Items: 
              - Authorization
              - "*"
          AccessControlAllowMethods:
            Items:
              - GET 
              - POST
              - OPTIONS 
          AccessControlAllowOrigins:
            Items: 
            - "*" # We control allowed origins using cloud front functions
              
          AccessControlExposeHeaders:
            Items:
              - Date
              - x-api-id
          AccessControlMaxAgeSec: 3000
          OriginOverride: true
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 3000 # time, in seconds, browser may cache preflight requests
            IncludeSubdomains: true # subdomains must also use HTTPS
            Preload: true # add site to HSTS preload list
            Override: true # override any origin settings 
            # default-src 'self'; // This directive serves as a fallback for other CSP directives. It specifies the default policy for fetching resources such as JavaScript, images, CSS, fonts, AJAX requests, frames, HTML5 media, and more.
            # img-src data: ; // This directive specifies valid sources of images. The 'data:' scheme allows data: URIs to be used as a content source. This is useful, for example, for embedding small images directly into CSS or HTML files.
            # script-src 'self'; // This directive specifies valid sources for JavaScript. This includes not only URLs loaded directly into <script> elements, but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution.
            # style-src self; // This directive specifies valid sources for stylesheets. This includes not only external stylesheets, but also inline <style> elements or the style attribute on any element.
            # style-src-elem self; // This directive specifies valid sources for stylesheets that are applied to elements. This includes not only external stylesheets, but also inline <style> elements or the style attribute on any element.
            # object-src self; // This directive specifies valid sources for the <object>, <embed>, and <applet> elements. It does not apply to <iframe> or <object> elements with a data attribute.
            # font-src *; // This directive specifies valid sources for fonts loaded using @font-face.
            # NOTE: 'self' refers to the exact domain from which the content is served. For our CloudFront distribution, this includes the subdomain.
          ContentSecurityPolicy:
            ContentSecurityPolicy:
              !If
                - IsDev
                - !Sub "default-src 'self' https://0.0.0.0 https://*.${RootDomainParameter}; img-src data: 'self' https://0.0.0.0 https://*.${RootDomainParameter}; script-src 'self' https://0.0.0.0 https://*.${RootDomainParameter} 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://0.0.0.0 https://*.${RootDomainParameter} 'unsafe-inline'; style-src-elem 'self' https://0.0.0.0 https://*.${RootDomainParameter} 'unsafe-inline'; object-src 'self' https://0.0.0.0 https://*.${RootDomainParameter}; worker-src 'self' https://0.0.0.0 https://*.${RootDomainParameter}; font-src *; connect-src 'self' https://0.0.0.0 https://*.${RootDomainParameter} wss://*.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter} https://cognito-idp.${AWS::Region}.amazonaws.com;"
                - !Sub "default-src 'self' https://0.0.0.0; img-src data: 'self' https://0.0.0.0; script-src 'self' https://0.0.0.0 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://0.0.0.0 'unsafe-inline'; style-src-elem 'self' https://0.0.0.0 'unsafe-inline'; object-src 'self' https://0.0.0.0; worker-src 'self' https://0.0.0.0; font-src *; connect-src 'self' https://0.0.0.0 wss://*.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter} https://cognito-idp.${AWS::Region}.amazonaws.com;"
            Override: true
          FrameOptions: # control whether a browser should be allowed to render a page in a <frame>, <iframe>, <embed>, or <object> tag
            FrameOption: DENY
            Override: true
          ReferrerPolicy: # The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests.
            ReferrerPolicy: same-origin # Sends the full referrer to same-origin destinations but no referrer to cross-origin destinations.
            Override: true

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${SystemKeyParameter}-${TenantKeyParameter}--oac
        Description: 'Origin Access Control for S3'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    # Note that each tenant has its own unique rootdomain
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref RootDomainParameter
          - !Sub '*.${RootDomainParameter}' # Wildcard subdomain necessary to allow subtenants under tenant
        Comment: !Sub '${AWS::StackName}-${TenantKeyParameter}'
        Logging:
          Bucket: !Sub '${CDNLogBucketNameParameter}.s3.${AWS::Region}.amazonaws.com'
          IncludeCookies: false 
          Prefix: !Sub '${TenantKeyParameter}/'

        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArnParameter
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'

        DefaultCacheBehavior: 
          # We use the default cache behavior for all requests except those that match the 
          # API path pattern. The RequestFunction handles all Origin Routing.
          TargetOriginId: TenancyAssetsOrigin
          ViewerProtocolPolicy: 'https-only'
          CachePolicyId: !Ref CachePolicyIdParameter
          OriginRequestPolicyId: !Ref OriginRequestPolicyIdParameter
          ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
          FunctionAssociations:
            - EventType: 'viewer-request'
              FunctionARN: !Ref RequestFunctionArnParameter

        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'

        CacheBehaviors:

          - PathPattern: '/devconfig'
            # Note that while we reference the TenancyAssetsOrigin S3 bucket, the config response is generated by the ConfigFunction,
            # so the S3 bucket is not actually accessed. 
            TargetOriginId: TenancyAssetsOrigin
            ViewerProtocolPolicy: 'https-only'
            CachePolicyId: !Ref CachePolicyIdParameter
            OriginRequestPolicyId: !Ref OriginRequestPolicyIdParameter
            ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            FunctionAssociations:
              - EventType: 'viewer-request'
                FunctionARN: !If [IsDev, !Ref DevConfigFunctionArnParameter, !Ref AuthConfigFunctionArnParameter]

          - PathPattern: '/config'
            # Note that while we reference the TenancyAssetsOrigin S3 bucket, the config response is generated by the ConfigFunction,
            # so the S3 bucket is not actually accessed. 
            TargetOriginId: TenancyAssetsOrigin
            ViewerProtocolPolicy: 'https-only'
            CachePolicyId: !Ref CachePolicyIdParameter
            OriginRequestPolicyId: !Ref OriginRequestPolicyIdParameter
            ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            FunctionAssociations:
              - EventType: 'viewer-request'
                FunctionARN: !Ref AuthConfigFunctionArnParameter


          # We need a different cache policy for API calls, so we have one 
          # cache behavior for the API and use the default for everything else.
          - PathPattern: /*Api/*
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: 'https-only'
            CachePolicyId: !Ref ApiCachePolicyIdParameter
            OriginRequestPolicyId: !Ref OriginRequestPolicyIdParameter
            ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id 
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            FunctionAssociations:
              - EventType: 'viewer-request'
                FunctionARN: !Ref ApiRequestFunctionArnParameter

        Origins:
          # Origin serving tenancy - note that we need at least one origin we can 
          # point the DefaultCacheBehavior to. Since we always have an S3 bucket for
          # assets, we use that as the origin. We use CloudFront functions to 
          # create origins on the fly, based on CloudFront NameValueStore entries, 
          # instead of hard coding them here.
          - Id: TenancyAssetsOrigin
            DomainName: !Sub '${SystemKeyParameter}-${TenantKeyParameter}--assets-${GuidParameter}.s3.${AWS::Region}.amazonaws.com'
            S3OriginConfig: {}
            OriginAccessControlId: !Ref OriginAccessControl


          - Id: ApiOrigin
            DomainName: !Ref RootDomainParameter
            OriginPath: !Sub '/${EnvironmentParameter}'
            CustomOriginConfig: 
              HTTPSPort: 443
              HTTPPort: 80
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneIdParameter
      RecordSets:
      # Root domain
      - Name: !Ref RootDomainParameter
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HostedZoneIdParameter is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2' 
      # We also need a wildcard subdomain to allow for subtenants
      - Name: !Sub "*.${RootDomainParameter}"
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HostedZoneIdParameter is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2' 

Outputs: 
  CloudFrontDistributionDomainName:
    Description: "The domain name of the CloudFront distribution"
    Value: !GetAtt CloudFrontDistribution.DomainName
  

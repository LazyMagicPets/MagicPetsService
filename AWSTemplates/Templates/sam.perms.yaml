AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack is used to create permissions among the resources in the system.
  Manually edit this file to create permissions between resources that 
  are not yet generated by LazyMagic.

  The Deploy-PermsAws powershell command will pass every output from the 
  other system stacks to this stack. Add the parameters you need to the 
  parameters section to use them.

Parameters:
  SystemKeyParameter:
    Description: "System Name"
    Type: String
 
  EnvironmentParameter:
    Description: "Environment"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  
  KeyValueStoreArnParameter:
    Type: String

  TenantAuthUserPoolIdParameter:
    Type: String
  TenantAuthUserPoolClientIdParameter:
    Type: String
  TenantAuthIdentityPoolIdParameter:
    Type: String
    Default: ""
  TenantAuthSecurityLevelParameter:
    Type: String
  TenantAuthUserPoolArnParameter:
    Type: String
  ConsumerAuthUserPoolIdParameter:
    Type: String
  ConsumerAuthUserPoolClientIdParameter:
    Type: String
  ConsumerAuthIdentityPoolIdParameter:
    Type: String
    Default: ""
  ConsumerAuthSecurityLevelParameter:
    Type: String
  ConsumerAuthUserPoolArnParameter:
    Type: String

  AdminLambdaExecutionRoleNameParameter:
    Type: String
  StoreLambdaExecutionRoleNameParameter:
    Type: String
  ConsumerLambdaExecutionRoleNameParameter:
    Type: String
  PublicLambdaExecutionRoleNameParameter:
    Type: String
  AdminApiIdParameter:
    Type: String
  StoreApiIdParameter:
    Type: String
  ConsumerApiIdParameter:
    Type: String
  PublicApiIdParameter:
    Type: String

Resources:
  # Comment out this resource when you add any other resource
  # It is here to allow for an otherwise empty template
  DummyHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  # # Example of a policy to allow a lambda to access cognito
  # # Note the use of the parameters created from outptus of 
  # #  the other stacks.
  # TenantAuthCognitoUserPoolPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: TenantAuthCognitoUserPoolAccess
  #     Roles: 
  #       - !Ref AdminLambdaExecutionRoleNameParameter
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - cognito-idp:AdminAddUserToGroup
  #             - cognito-idp:AdminConfirmSignUp
  #             - cognito-idp:AdminCreateUser
  #             - cognito-idp:AdminDeleteUser
  #             - cognito-idp:AdminDisableUser
  #             - cognito-idp:AdminEnableUser
  #             - cognito-idp:AdminGetUser
  #             - cognito-idp:AdminListGroupsForUser
  #             - cognito-idp:AdminRemoveUserFromGroup
  #             - cognito-idp:AdminResetUserPassword
  #             - cognito-idp:AdminUpdateUserAttributes
  #             - cognito-idp:ListUsers
  #             - cognito-idp:ListUsersInGroup
  #           Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TenantAuthUserPoolIdParameter}'
      

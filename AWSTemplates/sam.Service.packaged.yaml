AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
- AWS::LanguageExtensions
Description: 'This stack defines the service resources

  '
Parameters:
  ArtifactsBucketParameter:
    Description: Bucket where artifacts are stored
    Type: String
  EnvironmentParameter:
    Type: String
    Description: The stage name for the API Gateway and controls some policies
  SystemGuidParameter:
    Description: System Guid. No spaces. Lower case.
    Type: String
  SystemNameParameter:
    Description: System Name. No spaces. Lower case.
    Type: String
Resources:
  StoreLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: s3://lzm-artifacts-500c154a-fb41-496a-bd90-27f541ff523b/artifacts/df6df26d0a75b2d3536ee0d6345c95ab
      Handler: StoreLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'
    Metadata:
      SamResourceId: StoreLambda
  StoreLambdaStoreApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: StoreLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${StoreApi}/*/*/*/*
    Metadata:
      SamResourceId: StoreLambdaStoreApiPermissions
  StoreLambdaConsumerApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: StoreLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsumerApi}/*/*/*/*
    Metadata:
      SamResourceId: StoreLambdaConsumerApiPermissions
  StoreLambdaPublicApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: StoreLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicApi}/*/*/*/*
    Metadata:
      SamResourceId: StoreLambdaPublicApiPermissions
  ConsumerLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: s3://lzm-artifacts-500c154a-fb41-496a-bd90-27f541ff523b/artifacts/eefe95b4c4bac642e206b36ea11df2b2
      Handler: ConsumerLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'
    Metadata:
      SamResourceId: ConsumerLambda
  ConsumerLambdaStoreApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: ConsumerLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${StoreApi}/*/*/*/*
    Metadata:
      SamResourceId: ConsumerLambdaStoreApiPermissions
  ConsumerLambdaConsumerApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: ConsumerLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsumerApi}/*/*/*/*
    Metadata:
      SamResourceId: ConsumerLambdaConsumerApiPermissions
  ConsumerLambdaPublicApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: ConsumerLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicApi}/*/*/*/*
    Metadata:
      SamResourceId: ConsumerLambdaPublicApiPermissions
  PublicLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: s3://lzm-artifacts-500c154a-fb41-496a-bd90-27f541ff523b/artifacts/898f198f9b05de2dd67482ceb689123d
      Handler: PublicLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'
    Metadata:
      SamResourceId: PublicLambda
  PublicLambdaStoreApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: PublicLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${StoreApi}/*/*/*/*
    Metadata:
      SamResourceId: PublicLambdaStoreApiPermissions
  PublicLambdaConsumerApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: PublicLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsumerApi}/*/*/*/*
    Metadata:
      SamResourceId: PublicLambdaConsumerApiPermissions
  PublicLambdaPublicApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: PublicLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicApi}/*/*/*/*
    Metadata:
      SamResourceId: PublicLambdaPublicApiPermissions
  WebSocketLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: s3://lzm-artifacts-500c154a-fb41-496a-bd90-27f541ff523b/artifacts/6db14c0e0dea17fc36d689e38ceb28a2
      Handler: WebSocketLambda::LambdaFunc.Function::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated WebSocket Function
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
      - DynamoDBCrudPolicy:
          TableName: '*'
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*
          - Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${NotificationsFunction}/*/*
      - Statement:
        - Effect: Allow
          Action:
          - cognito-idp:GetUser
          Resource:
            Fn::GetAtt:
            - EmployeeAuthUserPool
            - Arn
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: EmployeeAuthUserPool
          AUTHENTICATION_REQUIRED: true
    Metadata:
      SamResourceId: WebSocketLambda
  WebSocketLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: WebSocketLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
    Metadata:
      SamResourceId: WebSocketLambdaInvokePermission
  WebSocketLambdaStoreApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: WebSocketLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${StoreApi}/*/*/*/*
    Metadata:
      SamResourceId: WebSocketLambdaStoreApiPermissions
  WebSocketLambdaConsumerApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: WebSocketLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsumerApi}/*/*/*/*
    Metadata:
      SamResourceId: WebSocketLambdaConsumerApiPermissions
  WebSocketLambdaPublicApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: WebSocketLambda
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicApi}/*/*/*/*
    Metadata:
      SamResourceId: WebSocketLambdaPublicApiPermissions
  StoreApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${EmployeeAuthUserPool}
              audience:
              - Ref: EmployeeAuthUserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer
      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false
      DefinitionBody:
        openapi: 3.0.1
        paths:
          /Store/lzNotificationsPage/list/subscriptionId/{subscriptionId}/dateTimeTicks/{dateTimeTicks}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/Notification:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/lzSubscription/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/lzSubscription:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/callerInfo:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/test:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/pet:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/pet/{petId}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/order/inventory:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/order:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/order/{orderId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/suspendUser/{user}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/user/{userId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/user:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/user/listUsers:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Store/pet/seedPets/{store}/{numPets}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0
    Metadata:
      SamResourceId: StoreApi
  ConsumerApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${ConsumerAuthUserPool}
              audience:
              - Ref: ConsumerAuthUserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer
      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false
      DefinitionBody:
        openapi: 3.0.1
        paths:
          /Consumer/lzNotificationsPage/list/subscriptionId/{subscriptionId}/dateTimeTicks/{dateTimeTicks}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Consumer/Notification:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Consumer/lzSubscription/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Consumer/lzSubscription:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          Consumer/preferences:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0
    Metadata:
      SamResourceId: ConsumerApi
  PublicApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: Unsecuire HttpApi generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      DefinitionBody:
        openapi: 3.0.1
        paths:
          /Public/publicTest:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Public/pet/listPets:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Public/pet/findByStatus:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Public/pet/{petId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Public/pet/findByTags:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Public/pet/categories:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
          /Public/pet/tags:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0
    Metadata:
      SamResourceId: PublicApi
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.eventType
    Metadata:
      SamResourceId: WebSocketApi
  WebSocketApiConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${WebSocketApiConnectIntegration}
    Metadata:
      SamResourceId: WebSocketApiConnectRoute
  WebSocketApiConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations
    Metadata:
      SamResourceId: WebSocketApiConnectIntegration
  WebSocketApiMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: message
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${WebSocketApiMessageIntegration}
    Metadata:
      SamResourceId: WebSocketApiMessageRoute
  WebSocketApiMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations
    Metadata:
      SamResourceId: WebSocketApiMessageIntegration
  WebSocketApiDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${WebSocketApiDefaultIntegration}
    Metadata:
      SamResourceId: WebSocketApiDefaultRoute
  WebSocketApiDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations
    Metadata:
      SamResourceId: WebSocketApiDefaultIntegration
  WebSocketApiDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${WebSocketApiDisconnectIntegration}
    Metadata:
      SamResourceId: WebSocketApiDisconnectRoute
  WebSocketApiDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations
    Metadata:
      SamResourceId: WebSocketApiDisconnectIntegration
  WebSocketApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - WebSocketApiMessageRoute
    - WebSocketApiConnectRoute
    - WebSocketApiDisconnectRoute
    - WebSocketApiDefaultRoute
    Properties:
      ApiId:
        Ref: WebSocketApi
    Metadata:
      SamResourceId: WebSocketApiDeployment
  WebSocketApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi
      DeploymentId:
        Ref: WebSocketApiDeployment
      StageName:
        Ref: EnvironmentParameter
    Metadata:
      SamResourceId: WebSocketApiStage
  EmployeeAuthUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName: EmployeeAuth
      AutoVerifiedAttributes:
      - email
    Metadata:
      SamResourceId: EmployeeAuthUserPool
  EmployeeAuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: EmployeeAuthUserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com
    Metadata:
      SamResourceId: EmployeeAuthUserPoolClient
  ConsumerAuthUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName: ConsumerAuth
      AutoVerifiedAttributes:
      - email
    Metadata:
      SamResourceId: ConsumerAuthUserPool
  ConsumerAuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: ConsumerAuthUserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com
    Metadata:
      SamResourceId: ConsumerAuthUserPoolClient
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: notifications
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: SK1
        AttributeType: S
      - AttributeName: SK2
        AttributeType: S
      - AttributeName: SK3
        AttributeType: S
      - AttributeName: SK4
        AttributeType: S
      - AttributeName: SK5
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: PK-SK1-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK1
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK2-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK2
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK3-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK3
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK4-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK4
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK5-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK5
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      GlobalSecondaryIndexes:
      - IndexName: GSI1
        KeySchema:
        - AttributeName: GSI1PK
          KeyType: HASH
        - AttributeName: GSI1SK
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
    Metadata:
      SamResourceId: NotificationsTable
  NotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: s3://lzm-artifacts-500c154a-fb41-496a-bd90-27f541ff523b/artifacts/51b0951e3b6d7a15f6195d59fa4ce071
      Handler: NotificationsLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: Processes DynamoDB stream events
      MemorySize: 256
      Timeout: 20
      Tracing: Active
      Policies:
      - DynamoDBStreamReadPolicy:
          StreamName:
            Fn::GetAtt:
            - NotificationsTable
            - StreamArn
          TableName:
            Ref: NotificationsTable
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - NotificationsTable
              - StreamArn
            BatchSize: 100
            StartingPosition: LATEST
    Metadata:
      SamResourceId: NotificationsFunction
  ConfigFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name:
        Fn::Sub: ${SystemNameParameter}-config-${SystemGuidParameter}
      FunctionCode:
        Fn::Sub: "async function handler(event) {\n    var response = {\n        statusCode:\
          \ 200,\n        statusDescription: 'OK',\n        headers: {\n         \
          \   'content-type': { value: 'application/json' }, // Set the content type\
          \ to application/json\n            'cache-control': { value: 'max-age=0,\
          \ no-cache, no-store, must-revalidate' } // Set caching headers to prevent\
          \ caching\n        },\n        body: JSON.stringify(\n            {\n  \
          \              meta: {\n                    type: 'cloudfront',\n      \
          \              awsRegion: '${AWS::Region}',\n                    wsUrl:\
          \ 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}',\n\
          \                 },\n                 authConfigs: {\n                \
          \    \n                    EmployeeAuth: {\n                        awsRegion:\
          \ '${AWS::Region}',\n                        userPoolName: 'EmployeeAuth',\n\
          \                        userPoolId: '${EmployeeAuthUserPool}',\n      \
          \                  userPoolClientId: '${EmployeeAuthUserPoolClient}',\n\
          \                        userPoolSecurityLevel: 1,\n                   \
          \     identityPoolId: ''\n                    },\n\n                   \
          \ ConsumerAuth: {\n                        awsRegion: '${AWS::Region}',\n\
          \                        userPoolName: 'ConsumerAuth',\n               \
          \         userPoolId: '${ConsumerAuthUserPool}',\n                     \
          \   userPoolClientId: '${ConsumerAuthUserPoolClient}',\n               \
          \         userPoolSecurityLevel: 1,\n                        identityPoolId:\
          \ ''\n                    },\n\n                 }\n            })\n   \
          \ }\n    return response\n}\n"
      AutoPublish: true
      FunctionConfig:
        Comment: CloudFront Function to handle /config path
        Runtime: cloudfront-js-2.0
    Metadata:
      SamResourceId: ConfigFunction
Outputs:
  ConfigFunctionArn:
    Value:
      Fn::GetAtt:
      - ConfigFunction
      - FunctionARN
  StoreApiId:
    Value:
      Ref: StoreApi
  ConsumerApiId:
    Value:
      Ref: ConsumerApi
  PublicApiId:
    Value:
      Ref: PublicApi
  WebSocketApiId:
    Value:
      Ref: WebSocketApi
  EmployeeAuthUserPoolName:
    Value: EmployeeAuth
  EmployeeAuthUserPoolId:
    Value:
      Ref: EmployeeAuthUserPool
  EmployeeAuthUserPoolClientId:
    Value:
      Ref: EmployeeAuthUserPoolClient
  EmployeeAuthIdentityPoolId:
    Value: ''
  EmployeeAuthSecurityLevel:
    Value: 1
  ConsumerAuthUserPoolName:
    Value: ConsumerAuth
  ConsumerAuthUserPoolId:
    Value:
      Ref: ConsumerAuthUserPool
  ConsumerAuthUserPoolClientId:
    Value:
      Ref: ConsumerAuthUserPoolClient
  ConsumerAuthIdentityPoolId:
    Value: ''
  ConsumerAuthSecurityLevel:
    Value: 1

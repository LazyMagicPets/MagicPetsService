AWSTemplateFormatVersion: '2010-09-09'
# Generated by AwsServiceStackTemplate from AWSTemplates/Snippets/sam.service.yaml
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack defines the service resources

Parameters:
  ArtifactsBucketParameter:
    Description: "Bucket where artifacts are stored"
    Type: String

  EnvironmentParameter:   
    Type: String
    Description: The stage name for the API Gateway and controls some policies
  
  SystemGuidParameter:
    Description: "System Guid. No spaces. Lower case."
    Type: String

  SystemNameParameter:
    Description: "System Name. No spaces. Lower case."
    Type: String    

#LzParameters start
# none configured
#LzParameters end


Resources:

#LzLambdas start


  StoreLambda:
    # Generated by AwsApiLambdaResource from AWSTemplates/Snippets/sam.service.apilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/StoreLambda/bin/Release/net8.0
               # container::namespace.class::method
      Handler: StoreLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'

  StoreLambdaStoreApiPermissions:
    # Generated by AwsServiceLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref StoreLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${StoreApi}/*/*/*/*'

  ConsumerLambda:
    # Generated by AwsApiLambdaResource from AWSTemplates/Snippets/sam.service.apilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/ConsumerLambda/bin/Release/net8.0
               # container::namespace.class::method
      Handler: ConsumerLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'

  ConsumerLambdaConsumerApiPermissions:
    # Generated by AwsServiceLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref ConsumerLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsumerApi}/*/*/*/*'

  PublicLambda:
    # Generated by AwsApiLambdaResource from AWSTemplates/Snippets/sam.service.apilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/PublicLambda/bin/Release/net8.0
               # container::namespace.class::method
      Handler: PublicLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'

  PublicLambdaPublicApiPermissions:
    # Generated by AwsServiceLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref PublicLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicApi}/*/*/*/*'

#LzLambdas end


#LzQueues start
#LzQeuues end


#LzApis start
  StoreApi:
    # Generated by AwsHttpApiResource from AwsTemplates/Snippets/sam.service.httpapi.cognito.yaml
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${EmployeeAuthUserPool}
              audience:
              - Ref: EmployeeAuthUserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/Store/lzNotificationsPage/list/subscriptionId/{subscriptionId}/dateTimeTicks/{dateTimeTicks}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/Notification':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/lzSubscription/{id}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/lzSubscription':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/callerInfo':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/test':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/pet':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/pet/{petId}':
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/order/inventory':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/order':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/order/{orderId}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/suspendUser/{user}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/user/{userId}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/user':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/user/listUsers':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Store/pet/seedPets/{store}/{numPets}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

  ConsumerApi:
    # Generated by AwsHttpApiResource from AwsTemplates/Snippets/sam.service.httpapi.cognito.yaml
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${ConsumerAuthUserPool}
              audience:
              - Ref: ConsumerAuthUserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/Consumer/lzNotificationsPage/list/subscriptionId/{subscriptionId}/dateTimeTicks/{dateTimeTicks}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Consumer/Notification':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Consumer/lzSubscription/{id}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Consumer/lzSubscription':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          'Consumer/preferences':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

  PublicApi:
    # Generated by AwsHttpApiResource from AwsTemplates/Snippets/sam.service.httpapi.cognito.yaml
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/Public/publicTest':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Public/pet/listPets':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Public/pet/findByStatus':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Public/pet/{petId}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Public/pet/findByTags':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Public/pet/categories':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/Public/pet/tags':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0


#LzApis end


#LzAuthenticators start
  EmployeeAuthUserPool:
    # Generated by AwsCognitoResource from AWSTemplates/Snippets/sam.service.cognito.jwt.managed.yaml
    Type: AWS::Cognito::UserPool
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName: EmployeeAuth 
      AutoVerifiedAttributes:
      - email
  EmployeeAuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: EmployeeAuthUserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com      

  ConsumerAuthUserPool:
    # Generated by AwsCognitoResource from AWSTemplates/Snippets/sam.service.cognito.jwt.unmanaged.yaml
    Type: AWS::Cognito::UserPool
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName: ConsumerAuth
      AutoVerifiedAttributes:
      - email
  ConsumerAuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: ConsumerAuthUserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com      

#LzAuthenticators end


#LzConfigFunction start
  ConfigFunction:  
    # Generated by AwsServiceStackTemplate from AWSTemplates/Snippets/sam.service.cloudfront.configfunction.yaml
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${SystemNameParameter}-config-${SystemGuidParameter}
      FunctionCode: 
        Fn::Sub: |
            async function handler(event) {
                var response = {
                    statusCode: 200,
                    statusDescription: 'OK',
                    headers: {
                        'content-type': { value: 'application/json' }, // Set the content type to application/json
                        'cache-control': { value: 'max-age=0, no-cache, no-store, must-revalidate' } // Set caching headers to prevent caching
                    },
                    body: JSON.stringify(
                        {
                            meta: {
                                type: 'cloudfront',
                                awsRegion: '${AWS::Region}',
                                wsUrl: '',
                             },
                             authConfigs: {
                                
                                EmployeeAuth: {
                                    awsRegion: '${AWS::Region}',
                                    userPoolName: 'EmployeeAuth',
                                    userPoolId: '${EmployeeAuthUserPool}',
                                    userPoolClientId: '${EmployeeAuthUserPoolClient}',
                                    userPoolSecurityLevel: 1,
                                    identityPoolId: ''
                                },

                                ConsumerAuth: {
                                    awsRegion: '${AWS::Region}',
                                    userPoolName: 'ConsumerAuth',
                                    userPoolId: '${ConsumerAuthUserPool}',
                                    userPoolClientId: '${ConsumerAuthUserPoolClient}',
                                    userPoolSecurityLevel: 1,
                                    identityPoolId: ''
                                },

                             }
                        })
                }
                return response
            }
      AutoPublish: true
      FunctionConfig:
        Comment: 'CloudFront Function to handle /config path'
        Runtime: cloudfront-js-2.0
#LzConfigFunction end


Outputs:
  ConfigFunctionArn:
    Value: !GetAtt ConfigFunction.FunctionARN


  StoreApiId:
    Value: !Ref StoreApi

  ConsumerApiId:
    Value: !Ref ConsumerApi

  PublicApiId:
    Value: !Ref PublicApi

  EmployeeAuthUserPoolName:
    Value: EmployeeAuth
  EmployeeAuthUserPoolId:
    Value: !Ref EmployeeAuthUserPool
  EmployeeAuthUserPoolClientId:
    Value: !Ref EmployeeAuthUserPoolClient
  EmployeeAuthIdentityPoolId:
    Value: ""
  EmployeeAuthSecurityLevel:
    Value: 1

  ConsumerAuthUserPoolName:
    Value: ConsumerAuth
  ConsumerAuthUserPoolId:
    Value: !Ref ConsumerAuthUserPool
  ConsumerAuthUserPoolClientId:
    Value: !Ref ConsumerAuthUserPoolClient
  ConsumerAuthIdentityPoolId:
    Value: ""
  ConsumerAuthSecurityLevel:
    Value: 1


    
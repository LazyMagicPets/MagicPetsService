AWSTemplateFormatVersion: '2010-09-09'
# Generated by AwsServiceStackTemplate from AWSTemplates/Snippets/sam.service.yaml
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack defines the service resources

Parameters:
  ArtifactsBucketParameter:
    Description: "Bucket where artifacts are stored"
    Type: String

  EnvironmentParameter:   
    Type: String
    Description: The stage name for the API Gateway and controls some policies
  
  SystemSuffixParameter:
    Description: "System Guid. No spaces. Lower case."
    Type: String

  SystemKeyParameter:
    Description: "System Name. No spaces. Lower case."
    Type: String    

#LzParameters start
  TenantAuthUserPoolIdParameter:
    Type: String
  TenantAuthUserPoolClientIdParameter:
    Type: String
  TenantAuthIdentityPoolIdParameter:
    Type: String
  TenantAuthSecurityLevelParameter:
    Type: String
  TenantAuthUserPoolArnParameter:
    Type: String
  ConsumerAuthUserPoolIdParameter:
    Type: String
  ConsumerAuthUserPoolClientIdParameter:
    Type: String
  ConsumerAuthIdentityPoolIdParameter:
    Type: String
  ConsumerAuthSecurityLevelParameter:
    Type: String
  ConsumerAuthUserPoolArnParameter:
    Type: String
# none configured
#LzParameters end


Resources:

#LzLambdas start
  StoreLambda:
    # Generated by AwsApiLambdaResource from AWSTemplates/Snippets/sam.service.apilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/StoreLambda/bin/Release/net8.0
               # container::namespace.class::method
      Handler: StoreLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'

  StoreLambdaStoreApiPermissions:
    # Generated by AwsServiceApiLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref StoreLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${StoreApi}/*/*/*/*'

  ConsumerLambda:
    # Generated by AwsApiLambdaResource from AWSTemplates/Snippets/sam.service.apilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/ConsumerLambda/bin/Release/net8.0
               # container::namespace.class::method
      Handler: ConsumerLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'

  ConsumerLambdaConsumerApiPermissions:
    # Generated by AwsServiceApiLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref ConsumerLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsumerApi}/*/*/*/*'

  PublicLambda:
    # Generated by AwsApiLambdaResource from AWSTemplates/Snippets/sam.service.apilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/PublicLambda/bin/Release/net8.0
               # container::namespace.class::method
      Handler: PublicLambda::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated Lambda
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName: '*'

  PublicLambdaPublicApiPermissions:
    # Generated by AwsServiceApiLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref PublicLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicApi}/*/*/*/*'

  LzMessagingWebSocketLambda:
    # Generated by AwsWSApiLambdaResource from AWSTemplates/Snippets/sam.service.messaging.wsapilambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/LzMessagingWebSocketLambda/bin/Release/net8.0
             # container::namespace.class::method
      Handler: LzMessagingWebSocketLambda::LambdaFunc.Function::FunctionHandlerAsync
      Runtime: dotnet8
      Description: Handle CONNECT, DISCONNECT, and MESSAGE routes for a WebSocket API
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - DynamoDBCrudPolicy:
          TableName: '*'
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${LzMessagingApi}/*/* 

      - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: 
            - !Ref ConsumerAuthUserPoolArnParameter
            - !Ref TenantAuthUserPoolArnParameter

 
      Environment:
        Variables:
          AUTHENTICATION_REQUIRED: true
  
  LzMessagingWebSocketLambdaLzMessagingApiPermissions:
    # Generated by AwsServiceApiLambdasResources from AWSTemplates/Snippets/sam.service.lambda.permission.yaml
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LzMessagingWebSocketLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${LzMessagingApi}/*/*/*/*'

#LzLambdas end


#LzQueues start
  LzMessagingQueue:
    # Generated by AwsSQSResource from AWSTemplates/Snippets/sam.service.messaging.sqs.yaml
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}LzMessagingQueue
      VisibilityTimeout: 180 
      MessageRetentionPeriod: 345600 
      DelaySeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt LzMessagingQueuedlq.Arn
        maxReceiveCount: 500

  LzMessagingQueuedlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}LzMessagingQueuedlq
      MessageRetentionPeriod: 345600     

  LzMessagingQueueLambdaSQSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: 
                  - !GetAtt LzMessagingQueue.Arn
                  - !GetAtt LzMessagingQueuedlq.Arn

  LzMessagingLambda:
    # Generated by AwsSQSLambdaResource from AWSTemplates/Snippets/sam.service.messaging.sqslambda.yaml
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: ../../Containers/LzMessagingLambda/bin/Release/net8.0
             # container::namespace.class::method
      Handler: LzMessagingLambda::LambdaFunc.Function::FunctionHandlerAsync
      Runtime: dotnet8
      Description: LazyMagic Generated WebSocket Function
      MemorySize: 256
      Timeout: 30  
      Tracing: Active  
      Policies:
      - DynamoDBCrudPolicy:
          TableName: '*'
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${LzMessagingApi}/*/* 
      - SQSPollerPolicy:
          QueueName: !GetAtt LzMessagingQueue.QueueName
      - Statement:
        - Effect: Allow
          Action:
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:ReceiveMessage
          Resource: !GetAtt LzMessagingQueue.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt LzMessagingQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 2  

#LzQeuues end


#LzApis start
  StoreApi:
    # Generated by AwsHttpApiResource from AwsTemplates/Snippets/sam.service.httpapi.cognito.yaml
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${TenantAuthUserPoolIdParameter}
              audience:
              - Ref: TenantAuthUserPoolClientIdParameter
        DefaultAuthorizer: OpenIdAuthorizer

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/callerInfo':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/test':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/order/inventory':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/order':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/user':
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/user/listUsers':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/{petId}':
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/order/{orderId}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/suspendUser/{user}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/user/{userId}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/seedPets/{store}/{numPets}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreLambda.Arn}/invocations
                payloadFormatVersion: 2.0

  ConsumerApi:
    # Generated by AwsHttpApiResource from AwsTemplates/Snippets/sam.service.httpapi.cognito.yaml
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${ConsumerAuthUserPoolIdParameter}
              audience:
              - Ref: ConsumerAuthUserPoolClientIdParameter
        DefaultAuthorizer: OpenIdAuthorizer

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/preferences':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConsumerLambda.Arn}/invocations
                payloadFormatVersion: 2.0

  PublicApi:
    # Generated by AwsHttpApiResource from AwsTemplates/Snippets/sam.service.httpapi.cognito.yaml
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/publicTest':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/listPets':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/findByStatus':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/findByTags':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/categories':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/tags':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

          '/pet/{petId}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublicLambda.Arn}/invocations
                payloadFormatVersion: 2.0

  # WebSocket
  # Generated by AwsWSApiResource from AwsTemplates/Snippets/sam.service.messaging.wsapi.yaml
  LzMessagingApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: LzMessagingApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.eventType

  LzMessagingApiConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: LzMessagingApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${LzMessagingApiConnectIntegration}

  LzMessagingApiConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: LzMessagingApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LzMessagingWebSocketLambda.Arn}/invocations

  LzMessagingApiMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: LzMessagingApi
      RouteKey: message
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${LzMessagingApiMessageIntegration}

  LzMessagingApiMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: LzMessagingApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LzMessagingWebSocketLambda.Arn}/invocations

  LzMessagingApiDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: LzMessagingApi
      RouteKey: $default
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${LzMessagingApiDefaultIntegration}

  LzMessagingApiDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: LzMessagingApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LzMessagingWebSocketLambda.Arn}/invocations

  LzMessagingApiDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: LzMessagingApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target:
        Fn::Sub: integrations/${LzMessagingApiDisconnectIntegration}

  LzMessagingApiDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: LzMessagingApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LzMessagingWebSocketLambda.Arn}/invocations


  LzMessagingApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - LzMessagingApiMessageRoute
    - LzMessagingApiConnectRoute
    - LzMessagingApiDisconnectRoute
    - LzMessagingApiDefaultRoute
    Properties:
      ApiId:
        Ref: LzMessagingApi

  LzMessagingApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: LzMessagingApi
      DeploymentId:
        Ref: LzMessagingApiDeployment
      StageName:
        Ref: EnvironmentParameter
#LzApis end


#LzConfigFunction start
  ConfigFunction:  
    # Generated by AwsServiceStackTemplate from AWSTemplates/Snippets/sam.service.cloudfront.configfunction.yaml
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${SystemKeyParameter}---config
      FunctionCode: 
        Fn::Sub: |
            async function handler(event) {
                var response = {
                    statusCode: 200,
                    statusDescription: 'OK',
                    headers: {
                        'content-type': { value: 'application/json' }, // Set the content type to application/json
                        'cache-control': { value: 'max-age=0, no-cache, no-store, must-revalidate' } // Set caching headers to prevent caching
                    },
                    body: JSON.stringify(
                        {
                            meta: {
                                type: 'cloudfront',
                                awsRegion: '${AWS::Region}',
                                wsUrl: 'wss://${LzMessagingApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}',
                             },
                             authConfigs: {
                                
                                TenantAuth: {
                                    awsRegion: '${AWS::Region}',
                                    userPoolName: 'TenantAuth',
                                    userPoolId: '${TenantAuthUserPoolIdParameter}',
                                    userPoolClientId: '${TenantAuthUserPoolClientIdParameter}',
                                    userPoolSecurityLevel: '${TenantAuthSecurityLevelParameter}',
                                    identityPoolId: '${TenantAuthIdentityPoolIdParameter}'
                                },

                                ConsumerAuth: {
                                    awsRegion: '${AWS::Region}',
                                    userPoolName: 'ConsumerAuth',
                                    userPoolId: '${ConsumerAuthUserPoolIdParameter}',
                                    userPoolClientId: '${ConsumerAuthUserPoolClientIdParameter}',
                                    userPoolSecurityLevel: '${ConsumerAuthSecurityLevelParameter}',
                                    identityPoolId: '${ConsumerAuthIdentityPoolIdParameter}'
                                },

                             }
                        })
                }
                return response
            }
      AutoPublish: true
      FunctionConfig:
        Comment: 'CloudFront Function to handle /config path'
        Runtime: cloudfront-js-2.0
#LzConfigFunction end



Outputs:
  ConfigFunctionArn:
    Value: !GetAtt ConfigFunction.FunctionARN


  StoreApiId:
    Value: !Ref StoreApi

  ConsumerApiId:
    Value: !Ref ConsumerApi

  PublicApiId:
    Value: !Ref PublicApi

  LzMessagingApiId:
    Value: !Ref LzMessagingApi


    
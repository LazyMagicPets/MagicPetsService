//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 1998 // Disable "CS1998 Disable async warning."

namespace AdminModule
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public interface IAdminModuleController
    {

        /// <summary>
        /// Check if currently logged in tenantUser is an admin
        /// </summary>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUserStatus>> IsAdmin();

        /// <summary>
        /// Add a new tenantUser
        /// </summary>


        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUser>> AddTenantUser(TenantUser body);

        /// <summary>
        /// Update an existing tenantUser
        /// </summary>


        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUser>> UpdateTenantUser(TenantUser body);

        /// <summary>
        /// List all tenantUsers
        /// </summary>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<TenantUser>>> ListTenantUsers();

        /// <summary>
        /// Add a new Subtenant
        /// </summary>


        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Subtenant>> AddSubtenant(Subtenant body);

        /// <summary>
        /// Update an existing Subtenant
        /// </summary>


        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Subtenant>> UpdateSubtenant(Subtenant body);

        /// <summary>
        /// List all Subtenants
        /// </summary>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Subtenant>>> ListSubtenants();

        /// <summary>
        /// See pet database
        /// </summary>

        /// <param name="store">Store to seed</param>

        /// <param name="numPets">Number of pets to seed</param>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> SeedPets(string store, int numPets);

        /// <summary>
        /// Suspend TenantUser
        /// </summary>

        /// <param name="tenantUser">tenantUser login</param>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> SuspendTenantUser(string tenantUser);

        /// <summary>
        /// Find tenantUser by ID
        /// </summary>

        /// <param name="tenantUserId">ID of tenantUser that needs to be fetched</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUser>> GetTenantUserById(string tenantUserId);

        /// <summary>
        /// Delete tenantUser by ID
        /// </summary>

        /// <param name="tenantUserId">ID of tenantUser that needs to be deleted</param>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteTenantUser(string tenantUserId);

        /// <summary>
        /// Find Subtenant by ID
        /// </summary>

        /// <param name="subtenantId">ID of Subtenant that needs to be fetched</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Subtenant>> GetSubtenantById(string subtenantId);

        /// <summary>
        /// Delete Subtenant by ID
        /// </summary>

        /// <param name="subtenantId">ID of Subtenant that needs to be deleted</param>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSubtenant(string subtenantId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0))")]

    public abstract partial class AdminModuleController : Microsoft.AspNetCore.Mvc.Controller,IAdminModuleController
    {

        /// <summary>
        /// Check if currently logged in tenantUser is an admin
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("isAdmin")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUserStatus>> IsAdmin()
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Add a new tenantUser
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("tenantUser")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUser>> AddTenantUser([Microsoft.AspNetCore.Mvc.FromBody] TenantUser body)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await tenantUserRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing tenantUser
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("tenantUser")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUser>> UpdateTenantUser([Microsoft.AspNetCore.Mvc.FromBody] TenantUser body)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await tenantUserRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// List all tenantUsers
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tenantUser/listTenantUsers")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<TenantUser>>> ListTenantUsers()
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await tenantUserRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Add a new Subtenant
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("subtenant")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Subtenant>> AddSubtenant([Microsoft.AspNetCore.Mvc.FromBody] Subtenant body)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await subtenantRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing Subtenant
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subtenant")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Subtenant>> UpdateSubtenant([Microsoft.AspNetCore.Mvc.FromBody] Subtenant body)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await subtenantRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// List all Subtenants
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subtenant/listSubtenants")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Subtenant>>> ListSubtenants()
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await subtenantRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// See pet database
        /// </summary>
        /// <param name="store">Store to seed</param>
        /// <param name="numPets">Number of pets to seed</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subtenant/seedPets/{store}/{numPets}")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> SeedPets(string store, int numPets)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await subtenantRepo.SeedPetsAsync(callerInfo, store, numPets);
        }
        /// <summary>
        /// Suspend TenantUser
        /// </summary>
        /// <param name="tenantUser">tenantUser login</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("suspendTenantUser/{tenantUser}")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> SuspendTenantUser(string tenantUser)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Find tenantUser by ID
        /// </summary>
        /// <param name="tenantUserId">ID of tenantUser that needs to be fetched</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tenantUser/{tenantUserId}")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TenantUser>> GetTenantUserById(string tenantUserId)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await tenantUserRepo.ReadAsync(callerInfo, tenantUserId);
        }
        /// <summary>
        /// Delete tenantUser by ID
        /// </summary>
        /// <param name="tenantUserId">ID of tenantUser that needs to be deleted</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("tenantUser/delete/{tenantUserId}")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteTenantUser(string tenantUserId)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await tenantUserRepo.DeleteAsync(callerInfo, tenantUserId);
        }
        /// <summary>
        /// Find Subtenant by ID
        /// </summary>
        /// <param name="subtenantId">ID of Subtenant that needs to be fetched</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subtenant/{subtenantId}")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Subtenant>> GetSubtenantById(string subtenantId)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await subtenantRepo.ReadAsync(callerInfo, subtenantId);
        }
        /// <summary>
        /// Delete Subtenant by ID
        /// </summary>
        /// <param name="subtenantId">ID of Subtenant that needs to be deleted</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subtenant/delete/{subtenantId}")]
        public virtual async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSubtenant(string subtenantId)
        {
            var callerInfo = await adminModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await subtenantRepo.DeleteAsync(callerInfo, subtenantId);
        }
		protected IAdminModuleAuthorization adminModuleAuthorization;
		protected ICategoryRepo categoryRepo;
		protected ITagRepo tagRepo;
		protected IPetRepo petRepo;
		protected IOrderRepo orderRepo;
		protected ITenantUserRepo tenantUserRepo;
		protected virtual void Init() { }
    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 1998

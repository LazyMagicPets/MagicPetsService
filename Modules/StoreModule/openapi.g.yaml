openapi: 3.0.1
paths:
  '/{prefix}/callerInfo':
    get:
      operationId: callerInfo
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
  '/{prefix}/test':
    get:
      summary: Test
      operationId: testEmployee
      x-lz-gencall: Task.FromResult("Hello World")
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        206:
          description: successful operation, partial return
          content:
            application/json:
              schema:
                type: string
  '/{prefix}/pet':
    post:
      summary: Add a new pet to the store
      operationId: addPet
      x-lz-gencall: petRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        405:
          description: Invalid input
    put:
      summary: Update an existing pet
      operationId: updatePet
      x-lz-gencall: petRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
  '/{prefix}/pet/{petId}':
    delete:
      summary: Deletes a pet
      operationId: deletePet
      x-lz-gencall: petRepo.DeleteAsync(callerInfo, petId)
      parameters:
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
  '/{prefix}/order/inventory':
    get:
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  '/{prefix}/order':
    post:
      summary: Place an order for a pet
      operationId: placeOrder
      x-lz-gencall: orderRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
  '/{prefix}/order/{orderId}':
    get:
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getOrderById
      x-lz-gencall: orderRepo.ReadAsync(callerInfo, orderId)
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: string
          minimum: 1
          maximum: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      summary: Delete purchase order by ID
      operationId: deleteOrder
      x-lz-gencall: orderRepo.DeleteAsync(callerInfo, orderId)
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  '/{prefix}/suspendUser/{user}':
    get:
      summary: Suspend EmployeeLambda user
      operationId: suspendUser
      parameters:
      - name: user
        in: path
        description: user login
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
  '/{prefix}/user/{userId}':
    get:
      summary: Find user by ID
      operationId: getUserById
      x-lz-gencall: userRepo.ReadAsync(callerInfo, userId)
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
  '/{prefix}/user':
    post:
      summary: Add a new user to the store
      operationId: addUser
      x-lz-gencall: userRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        405:
          description: Invalid input
    put:
      summary: Update an existing user
      operationId: updateUser
      x-lz-gencall: userRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
        405:
          description: Validation exception
  '/{prefix}/user/listUsers':
    get:
      summary: List all users
      operationId: listUsers
      x-lz-gencall: userRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Invalid status value
  '/{prefix}/pet/seedPets/{store}/{numPets}':
    get:
      summary: See pet database
      operationId: seedPets
      x-lz-gencall: petRepo.SeedAsync(callerInfo, store, numPets)
      parameters:
      - name: store
        in: path
        description: Store to seed
        required: true
        schema:
          type: string
      - name: numPets
        in: path
        description: Number of pets to seed
        required: true
        schema:
          type: integer
        default: 10
      responses:
        200:
          description: Success
components:
  schemas:
    Preferences:
      type: object
      properties:
        id:
          type: string
        theme:
          type: string
          enum:
          - light
          - dark
        locale:
          type: string
          enum:
          - en
          - fr
          - es
        petStatus:
          description: pet status in the store
          $ref: '#/components/schemas/PetStatus'
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        pet:
          $ref: '#/components/schemas/Pet'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
          example: Dog
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        petStatus:
          description: pet status in the store
          default: available
          $ref: '#/components/schemas/PetStatus'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    PetStatus:
      type: string
      description: pet status in the store
      enum:
      - available
      - pending
      - sold
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          description: Cognito Identity Id of clerk entering order
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          title: orderStatus
          description: Order Status
          $ref: '#/components/schemas/OrderStatus'
        complete:
          type: boolean
          default: false
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    OrderStatus:
      type: string
      description: Order Status
      enum:
      - placed
      - approved
      - delivered
    LzNotification:
      type: object
      required:
      - id
      - topicId
      - userId
      - payloadType
      - payloadAction
      properties:
        id:
          type: string
        topics:
          type: string
          nullable: true
        userId:
          type: string
          nullable: true
        payloadParentId:
          type: string
          nullable: true
        payloadId:
          type: string
          nullable: true
        payloadType:
          type: string
          nullable: true
        payload:
          type: string
          nullable: true
        payloadAction:
          type: string
          nullable: true
        sessionId:
          type: string
          nullable: true
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-hasrepo: true
      x-lz-genschemaclass: false
    LzNotificationsPage:
      type: object
      properties:
        id:
          type: string
        LzNotifications:
          type: array
          items:
            $ref: '#/components/schemas/LzNotification'
        more:
          type: boolean
      x-lz-genschemaclass: false
    LzSubscription:
      type: object
      properties:
        id:
          type: string
          description: subscriptionId
        connectionId:
          type: string
          description: web socket connectionId
        userId:
          type: string
          description: lzUserId
          nullable: true
        topicIds:
          type: array
          items:
            type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-hasrepo: true
      x-lz-genschemaclass: false
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        phone:
          type: string
          nullable: true
        employee:
          type: boolean
        admin:
          type: boolean
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    Bada:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
...

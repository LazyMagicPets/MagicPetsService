openapi: 3.0.1
paths:
 # User
  '/suspendUser/{user}':
    get:
      summary: Suspend EmployeeLambda user 
      operationId: suspendUser 
      parameters:
      - name: user
        in: path
        description: user login
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success     

  '/user/{userId}':
    get:
      summary: Find user by ID
      operationId: getUserById
      x-lz-gencall: userRepo.ReadAsync(callerInfo, userId)  
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found


  '/user':
    post:
      summary: Add a new user to the store
      operationId: addUser
      x-lz-gencall: userRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
    put: 
      summary: Update an existing user
      operationId: updateUser
      x-lz-gencall: userRepo.UpdateAsync(callerInfo, body)   
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception

  '/user/listUsers':
    get:
      summary: List all users 
      operationId: listUsers
      x-lz-gencall: userRepo.ListAsync(callerInfo) 
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value

  '/pet/seedPets/{store}/{numPets}':
    get:
      summary: See pet database
      operationId: seedPets
      x-lz-gencall: petRepo.SeedAsync(callerInfo, store, numPets)
      parameters:
      - name: store
        in: path
        description: Store to seed
        required: true
        schema:
          type: string
      - name: numPets
        in: path
        description: Number of pets to seed
        required: true
        schema:
          type: integer
        default: 10
      responses:
        '200':
          description: Success
